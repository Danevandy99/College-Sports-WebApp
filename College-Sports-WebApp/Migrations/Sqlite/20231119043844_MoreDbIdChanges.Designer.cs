// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace College_Sports_WebApp.Migrations.Sqlite
{
    [DbContext(typeof(SqliteDbContext))]
    [Migration("20231119043844_MoreDbIdChanges")]
    partial class MoreDbIdChanges
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.14");

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Airing", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Competitionid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("appAiringLink")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("appGameLink")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("artworkUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("createdBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("createdOn")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("end")
                        .HasColumnType("TEXT");

                    b.Property<string>("externalId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("lastModifiedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("lastModifiedOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("network")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("networkId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("network_displayName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("network_shortName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("playableUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("policyUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("policyid")
                        .HasColumnType("TEXT");

                    b.Property<string>("program")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("program_eventId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("program_eventUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("program_firstPresented")
                        .HasColumnType("TEXT");

                    b.Property<string>("program_language")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("program_originalAirDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("program_shortTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("propertiesId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("start")
                        .HasColumnType("TEXT");

                    b.Property<string>("webAiringLink")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("webGameLink")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("withinPlayWindow")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("Competitionid");

                    b.HasIndex("policyid");

                    b.HasIndex("propertiesId");

                    b.ToTable("Airing");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Athlete", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("displayName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("fullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("headshot")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("jersey")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("shortName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("teamid")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("teamid");

                    b.ToTable("Athlete");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.AthletesInvolved", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("LastPlayid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("displayName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("fullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("headshot")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("jersey")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("position")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("shortName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("teamid")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("LastPlayid");

                    b.HasIndex("teamid");

                    b.ToTable("AthletesInvolved");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Audience", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("TEXT");

                    b.Property<string>("externalId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("match")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("propertiesId")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("propertiesId");

                    b.ToTable("Audience");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Broadcast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Competitionid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("market")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("names")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Competitionid");

                    b.ToTable("Broadcast");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Category", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Videoid")
                        .HasColumnType("INTEGER");

                    b.Property<int>("athleteId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("leagueId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("sportId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("teamId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("uid")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("Videoid");

                    b.HasIndex("athleteId");

                    b.HasIndex("leagueId");

                    b.HasIndex("teamId");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Competition", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Eventid")
                        .HasColumnType("INTEGER");

                    b.Property<int>("attendance")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("conferenceCompetition")
                        .HasColumnType("INTEGER");

                    b.Property<string>("date")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("neutralSite")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("playByPlayAvailable")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("recent")
                        .HasColumnType("INTEGER");

                    b.Property<string>("startDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("timeValid")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("tournamentId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("typeid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("uid")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("venueid")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("Eventid");

                    b.HasIndex("typeid");

                    b.HasIndex("venueid");

                    b.ToTable("Competition");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Competitor", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Competitionid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("homeAway")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("order")
                        .HasColumnType("INTEGER");

                    b.Property<string>("score")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("teamid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("uid")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("Competitionid");

                    b.HasIndex("teamid");

                    b.ToTable("Competitor");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.DeviceRestrictions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("devices")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DeviceRestrictions");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Event", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ScoreboardResultId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("date")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("seasonId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("shortName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("uid")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("ScoreboardResultId");

                    b.HasIndex("seasonId");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.GeoBroadcast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Competitionid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("lang")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("marketid")
                        .HasColumnType("INTEGER");

                    b.Property<int>("mediaId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("region")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("typeid")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Competitionid");

                    b.HasIndex("marketid");

                    b.HasIndex("mediaId");

                    b.HasIndex("typeid");

                    b.ToTable("GeoBroadcast");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Airingid")
                        .HasColumnType("TEXT");

                    b.Property<int?>("Videoid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("alt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("caption")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("credit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("height")
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("width")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Airingid");

                    b.HasIndex("Videoid");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.LastPlay", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("scoreValue")
                        .HasColumnType("INTEGER");

                    b.Property<int>("teamid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("typeid")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("teamid");

                    b.HasIndex("typeid");

                    b.ToTable("LastPlay");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Leader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Competitorid")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("LeaderId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("abbreviation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("athleteid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("displayName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("displayValue")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("shortDisplayName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("teamid")
                        .HasColumnType("INTEGER");

                    b.Property<double>("value")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("Competitorid");

                    b.HasIndex("LeaderId");

                    b.HasIndex("athleteid");

                    b.HasIndex("teamid");

                    b.ToTable("Leader");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.League", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ScoreboardResultId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("abbreviation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("calendar")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("calendarEndDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("calendarIsWhitelist")
                        .HasColumnType("INTEGER");

                    b.Property<string>("calendarStartDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("calendarType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("href")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("midsizeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("seasonId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("slug")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("uid")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("ScoreboardResultId");

                    b.HasIndex("seasonId");

                    b.ToTable("League");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.LeagueSeason", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("displayName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("endDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("startDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("typeid")
                        .HasColumnType("INTEGER");

                    b.Property<int>("year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("typeid");

                    b.ToTable("LeagueSeason");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Linescore", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Competitorid")
                        .HasColumnType("INTEGER");

                    b.Property<double>("value")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("Competitorid");

                    b.ToTable("Linescore");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Link", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AthletesInvolvedid")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Eventid")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("TicketId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("href")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("isExternal")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("isPremium")
                        .HasColumnType("INTEGER");

                    b.Property<string>("language")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("rel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("shortText")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AthletesInvolvedid");

                    b.HasIndex("Eventid");

                    b.HasIndex("TicketId");

                    b.ToTable("Link");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Logo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Leagueid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("alt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("height")
                        .HasColumnType("INTEGER");

                    b.Property<string>("href")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("lastUpdated")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("rel")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("width")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Leagueid");

                    b.ToTable("Logo");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Market", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Market");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Media", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("shortName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Competitionid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("headline")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Competitionid");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Odd", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Competitionid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("details")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double>("overUnder")
                        .HasColumnType("REAL");

                    b.Property<int>("providerid")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Competitionid");

                    b.HasIndex("providerid");

                    b.ToTable("Odd");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Peer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ImageId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("height")
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("url")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("width")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("Peer");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Policy", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("TEXT");

                    b.Property<string>("createdBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("createdOn")
                        .HasColumnType("TEXT");

                    b.Property<string>("lastModifiedBy")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("lastModifiedOn")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("Policy");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.ProgramCategory", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Airingid")
                        .HasColumnType("TEXT");

                    b.Property<string>("artworkUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("sportId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("Airingid");

                    b.ToTable("ProgramCategory");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Properties", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("airingConcurrency")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("allowStartOver")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("allowedAccess")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("artworkLastModified")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("broadcastStartOffset")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("canIpAuthenticate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("commercialReplacement")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("contentCleared")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("dtcPackages")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("feedType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("hasEspnId3Heartbeats")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("hasNielsenWatermarks")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("hasPassThroughAds")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("isLive")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("iso3166")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("killDateTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("language")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("liveReplay")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("nbStartTimestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("origination")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ratingsId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("reAir")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("shortName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("shortTitle")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("simulcastAiringId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("sponsored")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("subscription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("trackingId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("trueOriginal")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Properties");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Provider", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("priority")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.ToTable("Provider");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Record", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Competitorid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("abbreviation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("summary")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Competitorid");

                    b.ToTable("Record");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.ScoreboardResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("groups")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ScoreboardResults");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Season", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("slug")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("type")
                        .HasColumnType("INTEGER");

                    b.Property<int>("year")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Season");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Statistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Competitorid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("abbreviation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("displayValue")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("rankDisplayValue")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Competitorid");

                    b.ToTable("Statistic");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Team", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("abbreviation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("alternateColor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("color")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("conferenceId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("displayName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("isActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("logo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("shortDisplayName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("uid")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("venueid")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("venueid");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Competitionid")
                        .HasColumnType("INTEGER");

                    b.Property<int>("numberAvailable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("summary")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("Competitionid");

                    b.ToTable("Ticket");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Type", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("abbreviation")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("completed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("detail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("shortDetail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("shortName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("state")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("type")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.ToTable("Type");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Venue", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("capacity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("fullName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("indoor")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.ToTable("Venue");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Video", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ScoreboardResultId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("caption")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("cerebroId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("contributingPartner")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("contributingSystem")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("dataSourceIdentifier")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("deviceRestrictionsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("duration")
                        .HasColumnType("INTEGER");

                    b.Property<string>("headline")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("keywords")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("lastModified")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("originalPublishDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("premium")
                        .HasColumnType("INTEGER");

                    b.Property<string>("source")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("syndicatable")
                        .HasColumnType("INTEGER");

                    b.Property<string>("thumbnail")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("ScoreboardResultId");

                    b.HasIndex("deviceRestrictionsId");

                    b.ToTable("Video");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.ViewingPolicy", b =>
                {
                    b.Property<string>("id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Policyid")
                        .HasColumnType("TEXT");

                    b.Property<string>("actions")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("audienceid")
                        .HasColumnType("TEXT");

                    b.Property<string>("externalId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("Policyid");

                    b.HasIndex("audienceid");

                    b.ToTable("ViewingPolicy");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Airing", b =>
                {
                    b.HasOne("College_Sports_WebApp.Database.Models.Competition", null)
                        .WithMany("airings")
                        .HasForeignKey("Competitionid");

                    b.HasOne("College_Sports_WebApp.Database.Models.Policy", "policy")
                        .WithMany()
                        .HasForeignKey("policyid");

                    b.HasOne("College_Sports_WebApp.Database.Models.Properties", "properties")
                        .WithMany()
                        .HasForeignKey("propertiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("College_Sports_WebApp.Database.Models.ProductLinks", "productLinks", b1 =>
                        {
                            b1.Property<string>("Airingid")
                                .HasColumnType("TEXT");

                            b1.Property<string>("mobile")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("web")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("Airingid");

                            b1.ToTable("Airing");

                            b1.WithOwner()
                                .HasForeignKey("Airingid");
                        });

                    b.Navigation("policy");

                    b.Navigation("productLinks")
                        .IsRequired();

                    b.Navigation("properties");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Athlete", b =>
                {
                    b.HasOne("College_Sports_WebApp.Database.Models.Team", "team")
                        .WithMany()
                        .HasForeignKey("teamid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("College_Sports_WebApp.Database.Models.Position", "position", b1 =>
                        {
                            b1.Property<int>("Athleteid")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("abbreviation")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("Athleteid");

                            b1.ToTable("Athlete");

                            b1.WithOwner()
                                .HasForeignKey("Athleteid");
                        });

                    b.Navigation("position")
                        .IsRequired();

                    b.Navigation("team");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.AthletesInvolved", b =>
                {
                    b.HasOne("College_Sports_WebApp.Database.Models.LastPlay", null)
                        .WithMany("athletesInvolved")
                        .HasForeignKey("LastPlayid");

                    b.HasOne("College_Sports_WebApp.Database.Models.Team", "team")
                        .WithMany()
                        .HasForeignKey("teamid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("team");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Audience", b =>
                {
                    b.HasOne("College_Sports_WebApp.Database.Models.Properties", "properties")
                        .WithMany()
                        .HasForeignKey("propertiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("properties");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Broadcast", b =>
                {
                    b.HasOne("College_Sports_WebApp.Database.Models.Competition", null)
                        .WithMany("broadcasts")
                        .HasForeignKey("Competitionid");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Category", b =>
                {
                    b.HasOne("College_Sports_WebApp.Database.Models.Video", null)
                        .WithMany("categories")
                        .HasForeignKey("Videoid");

                    b.HasOne("College_Sports_WebApp.Database.Models.Athlete", "athlete")
                        .WithMany()
                        .HasForeignKey("athleteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("College_Sports_WebApp.Database.Models.League", "league")
                        .WithMany()
                        .HasForeignKey("leagueId");

                    b.HasOne("College_Sports_WebApp.Database.Models.Team", "team")
                        .WithMany()
                        .HasForeignKey("teamId");

                    b.Navigation("athlete");

                    b.Navigation("league");

                    b.Navigation("team");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Competition", b =>
                {
                    b.HasOne("College_Sports_WebApp.Database.Models.Event", null)
                        .WithMany("competitions")
                        .HasForeignKey("Eventid");

                    b.HasOne("College_Sports_WebApp.Database.Models.Type", "type")
                        .WithMany()
                        .HasForeignKey("typeid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("College_Sports_WebApp.Database.Models.Venue", "venue")
                        .WithMany()
                        .HasForeignKey("venueid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("College_Sports_WebApp.Database.Models.Status", "status", b1 =>
                        {
                            b1.Property<int>("Competitionid")
                                .HasColumnType("INTEGER");

                            b1.Property<double>("clock")
                                .HasColumnType("REAL");

                            b1.Property<string>("displayClock")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<int>("period")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("typeid")
                                .HasColumnType("INTEGER");

                            b1.HasKey("Competitionid");

                            b1.HasIndex("typeid");

                            b1.ToTable("Competition");

                            b1.WithOwner()
                                .HasForeignKey("Competitionid");

                            b1.HasOne("College_Sports_WebApp.Database.Models.Type", "type")
                                .WithMany()
                                .HasForeignKey("typeid")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("type");
                        });

                    b.OwnsOne("College_Sports_WebApp.Database.Models.Format", "format", b1 =>
                        {
                            b1.Property<int>("Competitionid")
                                .HasColumnType("INTEGER");

                            b1.HasKey("Competitionid");

                            b1.ToTable("Competition");

                            b1.WithOwner()
                                .HasForeignKey("Competitionid");

                            b1.OwnsOne("College_Sports_WebApp.Database.Models.Regulation", "regulation", b2 =>
                                {
                                    b2.Property<int>("FormatCompetitionid")
                                        .HasColumnType("INTEGER");

                                    b2.Property<int>("periods")
                                        .HasColumnType("INTEGER");

                                    b2.HasKey("FormatCompetitionid");

                                    b2.ToTable("Competition");

                                    b2.WithOwner()
                                        .HasForeignKey("FormatCompetitionid");
                                });

                            b1.Navigation("regulation")
                                .IsRequired();
                        });

                    b.OwnsOne("College_Sports_WebApp.Database.Models.Situation", "situation", b1 =>
                        {
                            b1.Property<int>("Competitionid")
                                .HasColumnType("INTEGER");

                            b1.Property<long>("lastPlayid")
                                .HasColumnType("INTEGER");

                            b1.HasKey("Competitionid");

                            b1.HasIndex("lastPlayid");

                            b1.ToTable("Competition");

                            b1.WithOwner()
                                .HasForeignKey("Competitionid");

                            b1.HasOne("College_Sports_WebApp.Database.Models.LastPlay", "lastPlay")
                                .WithMany()
                                .HasForeignKey("lastPlayid")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("lastPlay");
                        });

                    b.Navigation("format")
                        .IsRequired();

                    b.Navigation("situation")
                        .IsRequired();

                    b.Navigation("status")
                        .IsRequired();

                    b.Navigation("type");

                    b.Navigation("venue");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Competitor", b =>
                {
                    b.HasOne("College_Sports_WebApp.Database.Models.Competition", null)
                        .WithMany("competitors")
                        .HasForeignKey("Competitionid");

                    b.HasOne("College_Sports_WebApp.Database.Models.Team", "team")
                        .WithMany()
                        .HasForeignKey("teamid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("College_Sports_WebApp.Database.Models.CuratedRank", "curatedRank", b1 =>
                        {
                            b1.Property<int>("Competitorid")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("current")
                                .HasColumnType("INTEGER");

                            b1.HasKey("Competitorid");

                            b1.ToTable("Competitor");

                            b1.WithOwner()
                                .HasForeignKey("Competitorid");
                        });

                    b.Navigation("curatedRank")
                        .IsRequired();

                    b.Navigation("team");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Event", b =>
                {
                    b.HasOne("College_Sports_WebApp.Database.Models.ScoreboardResult", null)
                        .WithMany("events")
                        .HasForeignKey("ScoreboardResultId");

                    b.HasOne("College_Sports_WebApp.Database.Models.Season", "season")
                        .WithMany()
                        .HasForeignKey("seasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("College_Sports_WebApp.Database.Models.Status", "status", b1 =>
                        {
                            b1.Property<int>("Eventid")
                                .HasColumnType("INTEGER");

                            b1.Property<double>("clock")
                                .HasColumnType("REAL");

                            b1.Property<string>("displayClock")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<int>("period")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("typeid")
                                .HasColumnType("INTEGER");

                            b1.HasKey("Eventid");

                            b1.HasIndex("typeid");

                            b1.ToTable("Event");

                            b1.WithOwner()
                                .HasForeignKey("Eventid");

                            b1.HasOne("College_Sports_WebApp.Database.Models.Type", "type")
                                .WithMany()
                                .HasForeignKey("typeid")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("type");
                        });

                    b.OwnsOne("College_Sports_WebApp.Database.Models.Weather", "weather", b1 =>
                        {
                            b1.Property<int>("Eventid")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("conditionId")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("displayValue")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<int>("highTemperature")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("linkId")
                                .HasColumnType("INTEGER");

                            b1.Property<int>("temperature")
                                .HasColumnType("INTEGER");

                            b1.HasKey("Eventid");

                            b1.HasIndex("linkId");

                            b1.ToTable("Event");

                            b1.WithOwner()
                                .HasForeignKey("Eventid");

                            b1.HasOne("College_Sports_WebApp.Database.Models.Link", "link")
                                .WithMany()
                                .HasForeignKey("linkId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.Navigation("link");
                        });

                    b.Navigation("season");

                    b.Navigation("status")
                        .IsRequired();

                    b.Navigation("weather")
                        .IsRequired();
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.GeoBroadcast", b =>
                {
                    b.HasOne("College_Sports_WebApp.Database.Models.Competition", null)
                        .WithMany("geoBroadcasts")
                        .HasForeignKey("Competitionid");

                    b.HasOne("College_Sports_WebApp.Database.Models.Market", "market")
                        .WithMany()
                        .HasForeignKey("marketid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("College_Sports_WebApp.Database.Models.Media", "media")
                        .WithMany()
                        .HasForeignKey("mediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("College_Sports_WebApp.Database.Models.Type", "type")
                        .WithMany()
                        .HasForeignKey("typeid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("market");

                    b.Navigation("media");

                    b.Navigation("type");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Image", b =>
                {
                    b.HasOne("College_Sports_WebApp.Database.Models.Airing", null)
                        .WithMany("images")
                        .HasForeignKey("Airingid");

                    b.HasOne("College_Sports_WebApp.Database.Models.Video", null)
                        .WithMany("images")
                        .HasForeignKey("Videoid");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.LastPlay", b =>
                {
                    b.HasOne("College_Sports_WebApp.Database.Models.Team", "team")
                        .WithMany()
                        .HasForeignKey("teamid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("College_Sports_WebApp.Database.Models.Type", "type")
                        .WithMany()
                        .HasForeignKey("typeid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("College_Sports_WebApp.Database.Models.Probability", "probability", b1 =>
                        {
                            b1.Property<long>("LastPlayid")
                                .HasColumnType("INTEGER");

                            b1.Property<double>("awayWinPercentage")
                                .HasColumnType("REAL");

                            b1.Property<double>("homeWinPercentage")
                                .HasColumnType("REAL");

                            b1.Property<double>("tiePercentage")
                                .HasColumnType("REAL");

                            b1.HasKey("LastPlayid");

                            b1.ToTable("LastPlay");

                            b1.WithOwner()
                                .HasForeignKey("LastPlayid");
                        });

                    b.Navigation("probability")
                        .IsRequired();

                    b.Navigation("team");

                    b.Navigation("type");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Leader", b =>
                {
                    b.HasOne("College_Sports_WebApp.Database.Models.Competitor", null)
                        .WithMany("leaders")
                        .HasForeignKey("Competitorid");

                    b.HasOne("College_Sports_WebApp.Database.Models.Leader", null)
                        .WithMany("leaders")
                        .HasForeignKey("LeaderId");

                    b.HasOne("College_Sports_WebApp.Database.Models.Athlete", "athlete")
                        .WithMany()
                        .HasForeignKey("athleteid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("College_Sports_WebApp.Database.Models.Team", "team")
                        .WithMany()
                        .HasForeignKey("teamid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("athlete");

                    b.Navigation("team");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.League", b =>
                {
                    b.HasOne("College_Sports_WebApp.Database.Models.ScoreboardResult", null)
                        .WithMany("leagues")
                        .HasForeignKey("ScoreboardResultId");

                    b.HasOne("College_Sports_WebApp.Database.Models.LeagueSeason", "season")
                        .WithMany()
                        .HasForeignKey("seasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("season");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.LeagueSeason", b =>
                {
                    b.HasOne("College_Sports_WebApp.Database.Models.Type", "type")
                        .WithMany()
                        .HasForeignKey("typeid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("type");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Linescore", b =>
                {
                    b.HasOne("College_Sports_WebApp.Database.Models.Competitor", null)
                        .WithMany("linescores")
                        .HasForeignKey("Competitorid");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Link", b =>
                {
                    b.HasOne("College_Sports_WebApp.Database.Models.AthletesInvolved", null)
                        .WithMany("links")
                        .HasForeignKey("AthletesInvolvedid");

                    b.HasOne("College_Sports_WebApp.Database.Models.Event", null)
                        .WithMany("links")
                        .HasForeignKey("Eventid");

                    b.HasOne("College_Sports_WebApp.Database.Models.Ticket", null)
                        .WithMany("links")
                        .HasForeignKey("TicketId");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Logo", b =>
                {
                    b.HasOne("College_Sports_WebApp.Database.Models.League", null)
                        .WithMany("logos")
                        .HasForeignKey("Leagueid");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Note", b =>
                {
                    b.HasOne("College_Sports_WebApp.Database.Models.Competition", null)
                        .WithMany("notes")
                        .HasForeignKey("Competitionid");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Odd", b =>
                {
                    b.HasOne("College_Sports_WebApp.Database.Models.Competition", null)
                        .WithMany("odds")
                        .HasForeignKey("Competitionid");

                    b.HasOne("College_Sports_WebApp.Database.Models.Provider", "provider")
                        .WithMany()
                        .HasForeignKey("providerid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("provider");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Peer", b =>
                {
                    b.HasOne("College_Sports_WebApp.Database.Models.Image", null)
                        .WithMany("peers")
                        .HasForeignKey("ImageId");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.ProgramCategory", b =>
                {
                    b.HasOne("College_Sports_WebApp.Database.Models.Airing", null)
                        .WithMany("program_categories")
                        .HasForeignKey("Airingid");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Record", b =>
                {
                    b.HasOne("College_Sports_WebApp.Database.Models.Competitor", null)
                        .WithMany("records")
                        .HasForeignKey("Competitorid");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.ScoreboardResult", b =>
                {
                    b.OwnsOne("College_Sports_WebApp.Database.Models.EventsDate", "eventsDate", b1 =>
                        {
                            b1.Property<int>("ScoreboardResultId")
                                .HasColumnType("INTEGER");

                            b1.Property<DateTime>("date")
                                .HasColumnType("TEXT");

                            b1.Property<int>("seasonType")
                                .HasColumnType("INTEGER");

                            b1.HasKey("ScoreboardResultId");

                            b1.ToTable("ScoreboardResults");

                            b1.WithOwner()
                                .HasForeignKey("ScoreboardResultId");
                        });

                    b.Navigation("eventsDate")
                        .IsRequired();
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Statistic", b =>
                {
                    b.HasOne("College_Sports_WebApp.Database.Models.Competitor", null)
                        .WithMany("statistics")
                        .HasForeignKey("Competitorid");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Team", b =>
                {
                    b.HasOne("College_Sports_WebApp.Database.Models.Venue", "venue")
                        .WithMany()
                        .HasForeignKey("venueid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("venue");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Ticket", b =>
                {
                    b.HasOne("College_Sports_WebApp.Database.Models.Competition", null)
                        .WithMany("tickets")
                        .HasForeignKey("Competitionid");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Venue", b =>
                {
                    b.OwnsOne("College_Sports_WebApp.Database.Models.Address", "address", b1 =>
                        {
                            b1.Property<int>("Venueid")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("city")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("state")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("Venueid");

                            b1.ToTable("Venue");

                            b1.WithOwner()
                                .HasForeignKey("Venueid");
                        });

                    b.Navigation("address")
                        .IsRequired();
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Video", b =>
                {
                    b.HasOne("College_Sports_WebApp.Database.Models.ScoreboardResult", null)
                        .WithMany("videos")
                        .HasForeignKey("ScoreboardResultId");

                    b.HasOne("College_Sports_WebApp.Database.Models.DeviceRestrictions", "deviceRestrictions")
                        .WithMany()
                        .HasForeignKey("deviceRestrictionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("College_Sports_WebApp.Database.Models.Ad", "ad", b1 =>
                        {
                            b1.Property<int>("Videoid")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("bundle")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("sport")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("Videoid");

                            b1.ToTable("Video");

                            b1.WithOwner()
                                .HasForeignKey("Videoid");
                        });

                    b.OwnsOne("College_Sports_WebApp.Database.Models.PosterImages", "posterImages", b1 =>
                        {
                            b1.Property<int>("Videoid")
                                .HasColumnType("INTEGER");

                            b1.HasKey("Videoid");

                            b1.ToTable("Video");

                            b1.WithOwner()
                                .HasForeignKey("Videoid");

                            b1.OwnsOne("College_Sports_WebApp.Database.Models.Default", "default", b2 =>
                                {
                                    b2.Property<int>("PosterImagesVideoid")
                                        .HasColumnType("INTEGER");

                                    b2.Property<int>("height")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("href")
                                        .IsRequired()
                                        .HasColumnType("TEXT");

                                    b2.Property<int>("width")
                                        .HasColumnType("INTEGER");

                                    b2.HasKey("PosterImagesVideoid");

                                    b2.ToTable("Video");

                                    b2.HasAnnotation("Relational:JsonPropertyName", "default");

                                    b2.WithOwner()
                                        .HasForeignKey("PosterImagesVideoid");
                                });

                            b1.OwnsOne("College_Sports_Domain.Models.HrefWrapper", "full", b2 =>
                                {
                                    b2.Property<int>("PosterImagesVideoid")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("href")
                                        .IsRequired()
                                        .HasColumnType("TEXT");

                                    b2.HasKey("PosterImagesVideoid");

                                    b2.ToTable("Video");

                                    b2.WithOwner()
                                        .HasForeignKey("PosterImagesVideoid");
                                });

                            b1.OwnsOne("College_Sports_Domain.Models.HrefWrapper", "square", b2 =>
                                {
                                    b2.Property<int>("PosterImagesVideoid")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("href")
                                        .IsRequired()
                                        .HasColumnType("TEXT");

                                    b2.HasKey("PosterImagesVideoid");

                                    b2.ToTable("Video");

                                    b2.WithOwner()
                                        .HasForeignKey("PosterImagesVideoid");
                                });

                            b1.OwnsOne("College_Sports_Domain.Models.HrefWrapper", "wide", b2 =>
                                {
                                    b2.Property<int>("PosterImagesVideoid")
                                        .HasColumnType("INTEGER");

                                    b2.Property<string>("href")
                                        .IsRequired()
                                        .HasColumnType("TEXT");

                                    b2.HasKey("PosterImagesVideoid");

                                    b2.ToTable("Video");

                                    b2.WithOwner()
                                        .HasForeignKey("PosterImagesVideoid");
                                });

                            b1.Navigation("default")
                                .IsRequired();

                            b1.Navigation("full")
                                .IsRequired();

                            b1.Navigation("square")
                                .IsRequired();

                            b1.Navigation("wide")
                                .IsRequired();
                        });

                    b.OwnsOne("College_Sports_WebApp.Database.Models.TimeRestrictions", "timeRestrictions", b1 =>
                        {
                            b1.Property<int>("Videoid")
                                .HasColumnType("INTEGER");

                            b1.Property<DateTime>("embargoDate")
                                .HasColumnType("TEXT");

                            b1.Property<DateTime>("expirationDate")
                                .HasColumnType("TEXT");

                            b1.HasKey("Videoid");

                            b1.ToTable("Video");

                            b1.WithOwner()
                                .HasForeignKey("Videoid");
                        });

                    b.OwnsOne("College_Sports_WebApp.Database.Models.Tracking", "tracking", b1 =>
                        {
                            b1.Property<int>("Videoid")
                                .HasColumnType("INTEGER");

                            b1.Property<string>("coverageType")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("leagueName")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("sportName")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("trackingId")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("trackingName")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("Videoid");

                            b1.ToTable("Video");

                            b1.WithOwner()
                                .HasForeignKey("Videoid");
                        });

                    b.Navigation("ad")
                        .IsRequired();

                    b.Navigation("deviceRestrictions");

                    b.Navigation("posterImages")
                        .IsRequired();

                    b.Navigation("timeRestrictions")
                        .IsRequired();

                    b.Navigation("tracking")
                        .IsRequired();
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.ViewingPolicy", b =>
                {
                    b.HasOne("College_Sports_WebApp.Database.Models.Policy", null)
                        .WithMany("viewingPolicies")
                        .HasForeignKey("Policyid");

                    b.HasOne("College_Sports_WebApp.Database.Models.Audience", "audience")
                        .WithMany()
                        .HasForeignKey("audienceid");

                    b.Navigation("audience");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Airing", b =>
                {
                    b.Navigation("images");

                    b.Navigation("program_categories");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.AthletesInvolved", b =>
                {
                    b.Navigation("links");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Competition", b =>
                {
                    b.Navigation("airings");

                    b.Navigation("broadcasts");

                    b.Navigation("competitors");

                    b.Navigation("geoBroadcasts");

                    b.Navigation("notes");

                    b.Navigation("odds");

                    b.Navigation("tickets");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Competitor", b =>
                {
                    b.Navigation("leaders");

                    b.Navigation("linescores");

                    b.Navigation("records");

                    b.Navigation("statistics");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Event", b =>
                {
                    b.Navigation("competitions");

                    b.Navigation("links");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Image", b =>
                {
                    b.Navigation("peers");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.LastPlay", b =>
                {
                    b.Navigation("athletesInvolved");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Leader", b =>
                {
                    b.Navigation("leaders");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.League", b =>
                {
                    b.Navigation("logos");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Policy", b =>
                {
                    b.Navigation("viewingPolicies");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.ScoreboardResult", b =>
                {
                    b.Navigation("events");

                    b.Navigation("leagues");

                    b.Navigation("videos");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Ticket", b =>
                {
                    b.Navigation("links");
                });

            modelBuilder.Entity("College_Sports_WebApp.Database.Models.Video", b =>
                {
                    b.Navigation("categories");

                    b.Navigation("images");
                });
#pragma warning restore 612, 618
        }
    }
}
